/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.62).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.gft.inditex.infrastructure.adapters.input.rest.controller.precio;

import com.gft.inditex.domain.exception.NotFoundException;
import com.gft.inditex.domain.exception.ValidationException;
import com.gft.inditex.infrastructure.adapters.input.rest.configuration.exception.ErrorResponse;
import com.gft.inditex.infrastructure.adapters.input.rest.model.PrecioDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.time.OffsetDateTime;

@Validated
public interface PrecioApi {

    @Operation(summary = "Consulta el precio aplicable de un producto", description = "Devuelve el precio de un producto para una cadena espec√≠fica en una fecha y hora dada.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PrecioDTO.class))),
        
        @ApiResponse(responseCode = "400", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/precio",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    @ResponseBody ResponseEntity<PrecioDTO> getPrecio(
            @Parameter(in = ParameterIn.QUERY, description = "Identificador de la cadena de la tienda (por ejemplo, 1 para ZARA).",schema=@Schema())
            @RequestParam(value = "brandId", required = false)
            Integer brandId,
            @Parameter(in = ParameterIn.QUERY, description = "Identificador del producto.",schema=@Schema())
            @RequestParam(value = "productId", required = false)
            Integer productId,
            @Parameter(in = ParameterIn.QUERY, description = "Fecha y hora en la que se desea aplicar la consulta en formato `yyyy-MM-dd HH:mm:ss`.",schema=@Schema())
            @RequestParam(value = "fechaAplicacion", required = false)
            OffsetDateTime fechaAplicacion
) throws ValidationException, NotFoundException;

}

